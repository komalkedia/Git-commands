initialize repository:
git init
remove repository:
rm -rf


to exclude files:
touch .gitignore
it will create .gitignore file

add 1 file to staging area
git add filename

add all files to staging area
git add -A
git add .
Add only modified file no new file:
git add -u
https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-add.html

to commit 
git commit -m "message"

to remove 1 file
git reset filename

reset everything from staging area
git reset

show status of files in working/staging area
git status

Show log
git log
git log --stat
git reflog

show difference / modifications in files
git diff

add remote origin
git remote add origin https://github.com/komalkedia/test.git

pull from remote directory
git pull origin master

fatal: refusing to merge unrelated histories
git pull origin master --allow-unrelated-histories

Error: Untracked working tree file ‘xxxxx’ would be overwritten by merge.
git fetch --all
git reset --hard origin/master
This grabs the latest repository files without merging and resets the master branch and overwrites the modified ones.

push to remote repository
git push origin master

with username and password
git push -u origin master

create a branch in local
git branch branchname

show all branches
git branch

show all branches in remote
git branch -a

checkout to branch
git checkout branchname

checkout to master branch
git checkout master

merge changes from branch to master
git merge branchname

see merged branches
git branch --merged

Delete branch
git branch -d branchname

delete branch from remote
git push origin --delete branchname


process to create branch and merge
git branch new
git checkout new
git status
git add -A
git commit -m 'msg'
git push -u origin new
git checkout master
git pull origin master
git merge new
git push origin master


ammend message or file
git commit --amend

move commit from 1 branch to another
git cherry-pick <6-7 character fro hash log>

clean all changes including new files
git clean -df

only modified files reset
git reset --hard <hash>

to revert locally and then commit
git revert <hash>

before move to master branch, save current branch changes if its not completed
git stash save  "message"
apply stash changes when back to this branch, or need to merge this changes
git stash list
gives stash no.
git stash apply <stash no.>
or
git stash pop

delete stash
git stash drop <stash no>
git stash clear

get first checkout
git checkout -- .


sourcegear diffmerge
for diff tool
git difftool
git mergetool

Revert last commit from remote:
Set the local branch one revision back (HEAD^ means one revision back):
git reset --hard HEAD^
Push the changes to origin:
git push --force

Pull requests for the project may come from many different authors (forks), and you probably don't want a separate remote for each fork. Also, you don't want to make any assumptions about the branch the author used when submitting the pull request, or what else might be in the author's master branch. So it's better to reference the pull request as it appears in the upstream repository, rather than as it appears in the other forks.

Step 1:

git remote add upstream <url>
You've probably already done this step, but if not, you'll want a remote defined for the upstream project. The URL is the clone URL of the project you forked. More info at Configuring a remote for a fork and Syncing a fork.  upstream is the name you are giving to the remote, and while it can be anything,  upstream is the conventional name.

Step 2:

git pull upstream refs/pull/{id}/head
... where {id} is the pull request number.  upstream is the name of the remote to pull from, i.e. just "upstream" if you followed step 1 exactly. It can also be a URL, in which case you can skip step 1.

Step 3:

Type in a commit message for the merge commit. You can keep the default, although I recommend giving a nice one-line summary with the pull request number, the issue it fixes, and a short description:

Merge PR#42, fixing VIM-652, support for mapping arbitrary IDEA actions
